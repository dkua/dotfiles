# Set exports
export EDITOR=vim
export GOPATH=$HOME/go
export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:$GOPATH/bin:/usr/local/go/bin:/Applications/eclipse
export WORKON_HOME=$HOME/.virtualenvs
export CDPATH=$GOPATH/src
export LC_ALL="en_US.utf-8"
export LANG="$LC_ALL" 

# Set default user
DEFAULT_USER="dkua"

# Set aliases
alias "tmux.new"="tmux new-session -s ${1}"
alias "tmux.kill"="tmux kill-session -t ${1}"
alias "tmux.attach"="tmux attach-session -t ${1}"
alias "tmux.list"="tmux list-sessions"
alias "tmux.nuke"="tmux kill-server"
alias "anaconda"="export PATH=$HOME/anaconda/bin:$PATH"
alias "virtenv"="source /usr/local/bin/virtualenvwrapper.sh"

# Set some colours
GREEN="\[\e[0;32m\]"
BLUE="\[\e[0;34m\]"
RED="\[\e[0;31m\]"
YELLOW="\[\e[0;33m\]"
COLOREND="\[\e[00m\]"

# Find bash completion directory
bash=${BASH_VERSION%.*}; bmajor=${bash%.*}; bminor=${bash#*.}
if [ "$PS1" ] && [ $bmajor -eq 2 ] && [ $bminor '>' 04 ] ; then
    if [ -f ~/bin/bash_completion   ] ; then
        BASH_COMPLETION=~/bin/bash_completion
        BASH_COMPLETION_DIR=~/.bash_completion.d
        export BASH_COMPLETION BASH_COMPLETION_DIR
        . ~/bin/bash_completion
    fi
fi  
unset bash bmajor bminor

# Responsive Prompt
parse_git_branch() {
    if [[ -f "$BASH_COMPLETION_DIR/git" ]]; then
        branch=`__git_ps1 "%s"`
    else
        ref=$(git-symbolic-ref HEAD 2> /dev/null) || return
        branch="${ref#refs/heads/}"
    fi

    if [[ `tput cols` -lt 110 ]]; then
        branch=`echo $branch | sed s/feature/f/1`
        branch=`echo $branch | sed s/hotfix/h/1`
        branch=`echo $branch | sed s/release/\r/1`

        branch=`echo $branch | sed s/master/mstr/1`
        branch=`echo $branch | sed s/develop/dev/1`
    fi

    if [[ $branch != "" ]]; then
        if [[ $(git status 2> /dev/null | tail -n1) == "nothing to commit (working directory clean)" ]]; then
            echo "${GREEN}$branch${COLOREND} "
        else
            echo "${RED}$branch${COLROEND} "
        fi
    fi
}

working_directory() {
    dir=`pwd`
    in_home=0
    if [[ `pwd` =~ ^"$HOME"(/|$) ]]; then
        dir="~${dir#$HOME}"
        in_home=1
    fi

    workingdir=""
    if [[ `tput cols` -lt 110 ]]; then
        first="/`echo $dir | cut -d / -f 2`"
        letter=${first:0:2}
        if [[ $in_home == 1 ]]; then
            letter="~$letter"
        fi
        proj=`echo $dir | cut -d / -f 3`
        beginning="$letter/$proj"
        end=`echo "$dir" | rev | cut -d / -f1 | rev`

        if [[ $proj == "" ]]; then
            workingdir="$dir"
        elif [[ $proj == "~" ]]; then
            workingdir="$dir"
        elif [[ $dir =~ "$first/$proj"$ ]]; then
            workingdir="$beginning"
        elif [[ $dir =~ "$first/$proj/$end"$ ]]; then
            workingdir="$beginning/$end"
        else
            workingdir="$beginning/…/$end"
        fi
    else
        workingdir="$dir"
    fi

    echo -e "${YELLOW}$workingdir${COLOREND} "
}

parse_remote_state() {
    remote_state=$(git status -sb 2> /dev/null | grep -oh "\[.*\]")
    echo $remote_state
}

prompt() {
    if [[ $? -eq 0 ]]; then
        exit_status="${BLUE}›${COLOREND} "
    else
        exit_status="${RED}›${COLOREND} "
    fi

    PS1="$(working_directory)$(parse_git_branch)$(parse_remote_state)$exit_status"
}

PROMPT_COMMAND=prompt
